abstract type AbstractGeometry end

struct Poi1<:AbstractGeometry
    i::Tuple{Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Seg2<:AbstractGeometry
    i::NTuple{2,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Seg3<:AbstractGeometry
    i::NTuple{3,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Tri3<:AbstractGeometry
    i::NTuple{3,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct TriHermite<:AbstractGeometry
    i::NTuple{10,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Tri6<:AbstractGeometry
    i::NTuple{6,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Quad4<:AbstractGeometry
    i::NTuple{4,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Quad8<:AbstractGeometry
    i::NTuple{8,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Quad9<:AbstractGeometry
    i::NTuple{9,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct Tet4<:AbstractGeometry
    i::NTuple{4,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end
struct Hex8<:AbstractGeometry
    i::NTuple{8,Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

struct UnStructGeo<:AbstractGeometry
    i::Set{Int}
    x::Vector{Float64}
    y::Vector{Float64}
    z::Vector{Float64}
end

function (a::Poi1)(::Any)
    x = a.x[a.i[1]]
    y = a.y[a.i[1]]
    z = a.z[a.i[1]]
    return x, y, z
end

function (a::Seg2)(Œæ::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    z‚ÇÇ = a.z[a.i[2]]
    N‚ÇÅ = 0.5*(1.0-Œæ)
    N‚ÇÇ = 0.5*(1.0+Œæ)
    return N‚ÇÅ*x‚ÇÅ+N‚ÇÇ*x‚ÇÇ,
           N‚ÇÅ*y‚ÇÅ+N‚ÇÇ*y‚ÇÇ,
           N‚ÇÅ*z‚ÇÅ+N‚ÇÇ*z‚ÇÇ
end

function (a::Seg2)(b::Poi1,::Any)
    i = findfirst(x->x==b.i[1],a.i)
    if i == 1
        Œæ = -1.0
    elseif i == 2
        Œæ = 1.0
    else
        return (nothing,nothing)
    end
    return (a(Œæ),Œæ)
end

function (a::Seg3)(Œæ::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[3]]
    y‚ÇÇ = a.y[a.i[3]]
    z‚ÇÇ = a.z[a.i[3]]
    x‚ÇÉ = a.x[a.i[2]]
    y‚ÇÉ = a.y[a.i[2]]
    z‚ÇÉ = a.z[a.i[2]]
    N‚ÇÅ = 0.5*Œæ*(Œæ-1.0)
    N‚ÇÇ = 1.0-Œæ^2
    N‚ÇÉ = 0.5*Œæ*(Œæ+1.0)
    return N‚ÇÅ*x‚ÇÅ+N‚ÇÇ*x‚ÇÇ+N‚ÇÉ*x‚ÇÉ,
           N‚ÇÅ*y‚ÇÅ+N‚ÇÇ*y‚ÇÇ+N‚ÇÉ*y‚ÇÉ,
           N‚ÇÅ*z‚ÇÅ+N‚ÇÇ*z‚ÇÇ+N‚ÇÉ*z‚ÇÉ
end

function (a::Seg3)(b::Poi1,::Any)
    i = findfirst(x->x==b.i[1],a.i)
    if i == 1
        return -1.0
    elseif i == 2
        return 1.0
    else
        return nothing
    end
end

function (a::Tri3)(Œæ::Float64,Œ∑::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÉ = a.z[a.i[3]]
    N‚ÇÅ = Œæ
    N‚ÇÇ = Œ∑
    N‚ÇÉ = 1.0-Œæ-Œ∑
    return N‚ÇÅ*x‚ÇÅ+N‚ÇÇ*x‚ÇÇ+N‚ÇÉ*x‚ÇÉ,
           N‚ÇÅ*y‚ÇÅ+N‚ÇÇ*y‚ÇÇ+N‚ÇÉ*y‚ÇÉ,
           N‚ÇÅ*z‚ÇÅ+N‚ÇÇ*z‚ÇÇ+N‚ÇÉ*z‚ÇÉ
end

function (a::Tri3)(b::Poi1,::Any)
    i = findfirst(x->x==b.i[1],a.i)
    if i == 1
        Œæ = 1.0; Œ∑ = 0.0
    elseif i == 2
        Œæ = 0.0; Œ∑ = 1.0
    elseif i == 3
        Œæ = 0.0; Œ∑ = 0.0
    else
        return (nothing,nothing)
    end
    return (a(Œæ,Œ∑),(Œæ,Œ∑))
end

function (a::Tri3)(b::Seg2,Œæ‚ÇÄ::Float64)
    i = findfirst(x->x==b.i[1],a.i)
    if i == 1
        Œæ = 0.5*(1.0-Œæ‚ÇÄ); Œ∑ = 0.5*(1.0+Œæ‚ÇÄ)
    elseif i == 2
        Œæ = 0.0; Œ∑ = 0.5*(1.0-Œæ‚ÇÄ)
    elseif i == 3
        Œæ = 0.5*(1.0+Œæ‚ÇÄ); Œ∑ = 0.0
    else
        return (nothing,nothing)
    end
    return (a(Œæ,Œ∑),(Œæ,Œ∑))
end
function (a::TriHermite)(Œæ::Float64,Œ∑::Float64)
    Œæ‚ÇÅ = 1-Œæ-Œ∑
    Œæ‚ÇÇ = Œæ
    Œæ‚ÇÉ = Œ∑
    x‚ÇÅ = a.x[a.i[1]];y‚ÇÅ = a.y[a.i[1]];z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]];y‚ÇÇ = a.y[a.i[2]];z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]];y‚ÇÉ = a.y[a.i[3]];z‚ÇÉ = a.z[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]];y‚ÇÑ = a.y[a.i[4]];z‚ÇÑ = a.z[a.i[4]]
    x‚ÇÖ = a.x[a.i[5]];y‚ÇÖ = a.y[a.i[5]];z‚ÇÖ = a.z[a.i[5]]
    x‚ÇÜ = a.x[a.i[6]];y‚ÇÜ = a.y[a.i[6]];z‚ÇÜ = a.z[a.i[6]]
    x‚Çá = a.x[a.i[7]];y‚Çá = a.y[a.i[7]];z‚Çá = a.z[a.i[7]]
    x‚Çà = a.x[a.i[8]];y‚Çà = a.y[a.i[8]];z‚Çà = a.z[a.i[8]]
    x‚Çâ = a.x[a.i[9]];y‚Çâ = a.y[a.i[9]];z‚Çâ = a.z[a.i[9]]
    x‚ÇÅ‚ÇÄ = a.x[a.i[10]];y‚ÇÅ‚ÇÄ = a.y[a.i[10]];z‚ÇÅ‚ÇÄ = a.z[a.i[10]]
    N‚ÇÅ = 3*Œæ‚ÇÅ^2 - 2*Œæ‚ÇÅ^3 - 7*Œæ‚ÇÅ*Œæ‚ÇÇ*Œæ‚ÇÉ
    N‚ÇÇ = 3*Œæ‚ÇÇ^2 - 2*Œæ‚ÇÇ^3 - 7*Œæ‚ÇÇ*Œæ‚ÇÉ*Œæ‚ÇÅ
    N‚ÇÉ = 3*Œæ‚ÇÉ^2 - 2*Œæ‚ÇÉ^3 - 7*Œæ‚ÇÉ*Œæ‚ÇÅ*Œæ‚ÇÇ
    N‚ÇÑ = Œæ‚ÇÅ*Œæ‚ÇÇ*(2*Œæ‚ÇÅ + Œæ‚ÇÇ - 1)
    N‚ÇÖ = Œæ‚ÇÅ*Œæ‚ÇÉ*(2*Œæ‚ÇÅ + Œæ‚ÇÉ - 1)
    N‚ÇÜ = Œæ‚ÇÇ*Œæ‚ÇÉ*(2*Œæ‚ÇÇ + Œæ‚ÇÉ - 1)
    N‚Çá = Œæ‚ÇÇ*Œæ‚ÇÅ*(2*Œæ‚ÇÇ + Œæ‚ÇÅ - 1)
    N‚Çà = Œæ‚ÇÉ*Œæ‚ÇÅ*(2*Œæ‚ÇÉ + Œæ‚ÇÅ - 1)
    N‚Çâ = Œæ‚ÇÉ*Œæ‚ÇÇ*(2*Œæ‚ÇÉ + Œæ‚ÇÇ - 1)
    N‚ÇÅ‚ÇÄ = 27*Œæ‚ÇÅ*Œæ‚ÇÇ*Œæ‚ÇÉ
    return x‚ÇÅ*N‚ÇÅ + x‚ÇÇ*N‚ÇÇ + x‚ÇÉ*N‚ÇÉ + x‚ÇÑ*N‚ÇÑ + x‚ÇÖ*N‚ÇÖ + x‚ÇÜ*N‚ÇÜ + x‚Çá*N‚Çá + x‚Çà*N‚Çà + x‚Çâ*N‚Çâ + x‚ÇÅ‚ÇÄ*N‚ÇÅ‚ÇÄ,
           y‚ÇÅ*N‚ÇÅ + y‚ÇÇ*N‚ÇÇ + y‚ÇÉ*N‚ÇÉ + y‚ÇÑ*N‚ÇÑ + y‚ÇÖ*N‚ÇÖ + y‚ÇÜ*N‚ÇÜ + y‚Çá*N‚Çá + y‚Çà*N‚Çà + y‚Çâ*N‚Çâ + y‚ÇÅ‚ÇÄ*N‚ÇÅ‚ÇÄ,
           z‚ÇÅ*N‚ÇÅ + z‚ÇÇ*N‚ÇÇ + z‚ÇÉ*N‚ÇÉ + z‚ÇÑ*N‚ÇÑ + z‚ÇÖ*N‚ÇÖ + z‚ÇÜ*N‚ÇÜ + z‚Çá*N‚Çá + z‚Çà*N‚Çà + z‚Çâ*N‚Çâ + z‚ÇÅ‚ÇÄ*N‚ÇÅ‚ÇÄ
end
function (a::Tri6)(Œæ::Float64,Œ∑::Float64)
    Œ≥ = 1.0-Œæ-Œ∑
    x‚ÇÅ = a.x[a.i[1]];y‚ÇÅ = a.y[a.i[1]];z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]];y‚ÇÇ = a.y[a.i[2]];z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]];y‚ÇÉ = a.y[a.i[3]];z‚ÇÉ = a.z[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]];y‚ÇÑ = a.y[a.i[4]];z‚ÇÑ = a.z[a.i[4]]
    x‚ÇÖ = a.x[a.i[5]];y‚ÇÖ = a.y[a.i[5]];z‚ÇÖ = a.z[a.i[5]]
    x‚ÇÜ = a.x[a.i[6]];y‚ÇÜ = a.y[a.i[6]];z‚ÇÜ = a.z[a.i[6]]
    N‚ÇÅ = Œæ*(2*Œæ-1)
    N‚ÇÇ = Œ∑*(2*Œ∑-1)
    N‚ÇÉ = Œ≥*(2*Œ≥-1)
    N‚ÇÑ = 4*Œæ*Œ∑
    N‚ÇÖ = 4*Œ∑*Œ≥
    N‚ÇÜ = 4*Œ≥*Œæ
    return x‚ÇÅ*N‚ÇÅ+x‚ÇÇ*N‚ÇÇ+x‚ÇÉ*N‚ÇÉ+x‚ÇÑ*N‚ÇÑ+x‚ÇÖ*N‚ÇÖ+x‚ÇÜ*N‚ÇÜ,
           y‚ÇÅ*N‚ÇÅ+y‚ÇÇ*N‚ÇÇ+y‚ÇÉ*N‚ÇÉ+y‚ÇÑ*N‚ÇÑ+y‚ÇÖ*N‚ÇÖ+y‚ÇÜ*N‚ÇÜ,
           z‚ÇÅ*N‚ÇÅ+z‚ÇÇ*N‚ÇÇ+z‚ÇÉ*N‚ÇÉ+z‚ÇÑ*N‚ÇÑ+z‚ÇÖ*N‚ÇÖ+z‚ÇÜ*N‚ÇÜ
end
function (a::Tet4)(Œæ::Float64,Œ∑::Float64,Œ∂::Float64)
    
    x‚ÇÅ = a.x[a.i[1]];y‚ÇÅ = a.y[a.i[1]];z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]];y‚ÇÇ = a.y[a.i[2]];z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]];y‚ÇÉ = a.y[a.i[3]];z‚ÇÉ = a.z[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]];y‚ÇÑ = a.y[a.i[4]];z‚ÇÑ = a.z[a.i[4]]
    N‚ÇÅ = 1.0-x.Œæ-x.Œ∑-x.Œ∂
    N‚ÇÇ = x.Œæ
    N‚ÇÉ = x.Œ∑
    N‚ÇÑ = x.Œ∂
    return x‚ÇÅ*N‚ÇÅ+x‚ÇÇ*N‚ÇÇ+x‚ÇÉ*N‚ÇÉ+x‚ÇÑ*N‚ÇÑ,
           y‚ÇÅ*N‚ÇÅ+y‚ÇÇ*N‚ÇÇ+y‚ÇÉ*N‚ÇÉ+y‚ÇÑ*N‚ÇÑ,
           z‚ÇÅ*N‚ÇÅ+z‚ÇÇ*N‚ÇÇ+z‚ÇÉ*N‚ÇÉ+z‚ÇÑ*N‚ÇÑ
end

function (a::Quad4)(Œæ::Float64,Œ∑::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÉ = a.z[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]]
    y‚ÇÑ = a.y[a.i[4]]
    z‚ÇÑ = a.z[a.i[4]]
    N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ = getùù≠(a,Œæ,Œ∑)
    return (x‚ÇÅ*N‚ÇÅ+x‚ÇÇ*N‚ÇÇ+x‚ÇÉ*N‚ÇÉ+x‚ÇÑ*N‚ÇÑ,y‚ÇÅ*N‚ÇÅ+y‚ÇÇ*N‚ÇÇ+y‚ÇÉ*N‚ÇÉ+y‚ÇÑ*N‚ÇÑ,z‚ÇÅ*N‚ÇÅ+z‚ÇÇ*N‚ÇÇ+z‚ÇÉ*N‚ÇÉ+z‚ÇÑ*N‚ÇÑ)
end

function (a::Quad8)(Œæ::Float64,Œ∑::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÉ = a.z[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]]
    y‚ÇÑ = a.y[a.i[4]]
    z‚ÇÑ = a.z[a.i[4]]
    x‚ÇÖ = a.x[a.i[5]]
    y‚ÇÖ = a.y[a.i[5]]
    z‚ÇÖ = a.z[a.i[5]]
    x‚ÇÜ = a.x[a.i[6]]
    y‚ÇÜ = a.y[a.i[6]]
    z‚ÇÜ = a.z[a.i[6]]
    x‚Çá = a.x[a.i[7]]
    y‚Çá = a.y[a.i[7]]
    z‚Çá = a.z[a.i[7]]
    x‚Çà = a.x[a.i[8]]
    y‚Çà = a.y[a.i[8]]
    z‚Çà = a.z[a.i[8]]
    N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ,N‚ÇÖ,N‚ÇÜ,N‚Çá,N‚Çà = getùù≠(a,Œæ,Œ∑)
    return (x‚ÇÅ*N‚ÇÅ+x‚ÇÇ*N‚ÇÇ+x‚ÇÉ*N‚ÇÉ+x‚ÇÑ*N‚ÇÑ+x‚ÇÖ*N‚ÇÖ+x‚ÇÜ*N‚ÇÜ+x‚Çá*N‚Çá+x‚Çà*N‚Çà,
            y‚ÇÅ*N‚ÇÅ+y‚ÇÇ*N‚ÇÇ+y‚ÇÉ*N‚ÇÉ+y‚ÇÑ*N‚ÇÑ+y‚ÇÖ*N‚ÇÖ+y‚ÇÜ*N‚ÇÜ+y‚Çá*N‚Çá+y‚Çà*N‚Çà,
            z‚ÇÅ*N‚ÇÅ+z‚ÇÇ*N‚ÇÇ+z‚ÇÉ*N‚ÇÉ+z‚ÇÑ*N‚ÇÑ+z‚ÇÖ*N‚ÇÖ+z‚ÇÜ*N‚ÇÜ+z‚Çá*N‚Çá+z‚Çà*N‚Çà)
end
function (a::Hex8)(Œæ::Float64,Œ∑::Float64,Œ∂::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    z‚ÇÇ = a.z[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÉ = a.z[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]]
    y‚ÇÑ = a.y[a.i[4]]
    z‚ÇÑ = a.z[a.i[4]]
    x‚ÇÖ = a.x[a.i[5]]
    y‚ÇÖ = a.y[a.i[5]]
    z‚ÇÖ = a.z[a.i[5]]
    x‚ÇÜ = a.x[a.i[6]]
    y‚ÇÜ = a.y[a.i[6]]
    z‚ÇÜ = a.z[a.i[6]]
    x‚Çá = a.x[a.i[7]]
    y‚Çá = a.y[a.i[7]]
    z‚Çá = a.z[a.i[7]]
    x‚Çà = a.x[a.i[8]]
    y‚Çà = a.y[a.i[8]]
    z‚Çà = a.z[a.i[8]]
    N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ,N‚ÇÖ,N‚ÇÜ,N‚Çá,N‚Çà = getùù≠(a,Œæ,Œ∑,Œ∂)
    return (x‚ÇÅ*N‚ÇÅ+x‚ÇÇ*N‚ÇÇ+x‚ÇÉ*N‚ÇÉ+x‚ÇÑ*N‚ÇÑ+x‚ÇÖ*N‚ÇÖ+x‚ÇÜ*N‚ÇÜ+x‚Çá*N‚Çá+x‚Çà*N‚Çà,
            y‚ÇÅ*N‚ÇÅ+y‚ÇÇ*N‚ÇÇ+y‚ÇÉ*N‚ÇÉ+y‚ÇÑ*N‚ÇÑ+y‚ÇÖ*N‚ÇÖ+y‚ÇÜ*N‚ÇÜ+y‚Çá*N‚Çá+y‚Çà*N‚Çà,
            z‚ÇÅ*N‚ÇÅ+z‚ÇÇ*N‚ÇÇ+z‚ÇÉ*N‚ÇÉ+z‚ÇÑ*N‚ÇÑ+z‚ÇÖ*N‚ÇÖ+z‚ÇÜ*N‚ÇÜ+z‚Çá*N‚Çá+z‚Çà*N‚Çà)
end
function getùê¥(a::Tri3)
    x‚ÇÅ = a.x[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÅ = a.y[a.i[1]]
    y‚ÇÇ = a.y[a.i[2]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÅ = a.z[a.i[1]]
    z‚ÇÇ = a.z[a.i[2]]
    z‚ÇÉ = a.z[a.i[3]]

    return 0.5*(x‚ÇÅ*y‚ÇÇ+x‚ÇÇ*y‚ÇÉ+x‚ÇÉ*y‚ÇÅ-x‚ÇÇ*y‚ÇÅ-x‚ÇÉ*y‚ÇÇ-x‚ÇÅ*y‚ÇÉ)
end
getùêΩ(a::Tri3,::Float64,::Float64) = getùê¥(a)
function getùê¥(a::TriHermite)
    x‚ÇÅ = a.x[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÅ = a.y[a.i[1]]
    y‚ÇÇ = a.y[a.i[2]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÅ = a.z[a.i[1]]
    z‚ÇÇ = a.z[a.i[2]]
    z‚ÇÉ = a.z[a.i[3]]

    return 0.5*(x‚ÇÅ*y‚ÇÇ+x‚ÇÇ*y‚ÇÉ+x‚ÇÉ*y‚ÇÅ-x‚ÇÇ*y‚ÇÅ-x‚ÇÉ*y‚ÇÇ-x‚ÇÅ*y‚ÇÉ)
end
getùêΩ(a::TriHermite,::Float64,::Float64) = getùê¥(a)
function getùê¥(a::Tri6)
    x‚ÇÅ = a.x[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÅ = a.y[a.i[1]]
    y‚ÇÇ = a.y[a.i[2]]
    y‚ÇÉ = a.y[a.i[3]]
    z‚ÇÅ = a.z[a.i[1]]
    z‚ÇÇ = a.z[a.i[2]]
    z‚ÇÉ = a.z[a.i[3]]

    return 0.5*(x‚ÇÅ*y‚ÇÇ+x‚ÇÇ*y‚ÇÉ+x‚ÇÉ*y‚ÇÅ-x‚ÇÇ*y‚ÇÅ-x‚ÇÉ*y‚ÇÇ-x‚ÇÅ*y‚ÇÉ)
end
getùêΩ(a::Tri6,::Float64,::Float64) = getùê¥(a)

function getùêø(a::Seg2)
    x‚ÇÅ = a.x[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÅ = a.y[a.i[1]]
    y‚ÇÇ = a.y[a.i[2]]

    return ((x‚ÇÇ-x‚ÇÅ)^2+(y‚ÇÇ-y‚ÇÅ)^2)^0.5
end
getùêΩ(a::Seg2,::Float64) = 0.5*getùêø(a)

getùêΩ(a::Poi1,::Float64) = 1

function getùêø(a::Seg3)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    z‚ÇÅ = a.z[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    z‚ÇÇ = a.z[a.i[2]]
    return ((x‚ÇÇ-x‚ÇÅ)^2+(y‚ÇÇ-y‚ÇÅ)^2+(z‚ÇÇ-z‚ÇÅ)^2)^0.5
end
getùêΩ(a::Seg3,::Float64) = 0.5*getùêø(a)

function getùë±(a::Quad4,Œæ::Float64,Œ∑::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÉ = a.y[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]]
    y‚ÇÑ = a.y[a.i[4]]
    ‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ = get‚àÇùù≠‚àÇŒæ(a,Œæ)
    ‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑ = get‚àÇùù≠‚àÇŒ∑(a,Œ∑)
    J‚ÇÅ‚ÇÅ = ‚àÇN‚ÇÅ‚àÇŒæ*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*x‚ÇÑ
    J‚ÇÅ‚ÇÇ = ‚àÇN‚ÇÅ‚àÇŒ∑*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*x‚ÇÑ
    J‚ÇÇ‚ÇÅ = ‚àÇN‚ÇÅ‚àÇŒæ*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*y‚ÇÑ
    J‚ÇÇ‚ÇÇ = ‚àÇN‚ÇÅ‚àÇŒ∑*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*y‚ÇÑ
    return J‚ÇÅ‚ÇÅ,J‚ÇÇ‚ÇÅ,J‚ÇÅ‚ÇÇ,J‚ÇÇ‚ÇÇ
end

function getùêΩ(a::Quad4,Œæ::Float64,Œ∑::Float64)
    J‚ÇÅ‚ÇÅ,J‚ÇÇ‚ÇÅ,J‚ÇÅ‚ÇÇ,J‚ÇÇ‚ÇÇ = getùë±(a,Œæ,Œ∑)
    return J‚ÇÅ‚ÇÅ*J‚ÇÇ‚ÇÇ-J‚ÇÇ‚ÇÅ*J‚ÇÅ‚ÇÇ
end

function get‚àÇùù≠‚àÇŒæ(::Quad4,Œ∑::Float64)
    ‚àÇN‚ÇÅ‚àÇŒæ = - 0.25*(1-Œ∑)
    ‚àÇN‚ÇÇ‚àÇŒæ =   0.25*(1-Œ∑)
    ‚àÇN‚ÇÉ‚àÇŒæ =   0.25*(1+Œ∑)
    ‚àÇN‚ÇÑ‚àÇŒæ = - 0.25*(1+Œ∑)
    return (‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ)
end
function get‚àÇùù≠‚àÇŒ∑(::Quad4,Œæ::Float64)
    ‚àÇN‚ÇÅ‚àÇŒ∑ = - 0.25*(1-Œæ)
    ‚àÇN‚ÇÇ‚àÇŒ∑ = - 0.25*(1+Œæ)
    ‚àÇN‚ÇÉ‚àÇŒ∑ =   0.25*(1+Œæ)
    ‚àÇN‚ÇÑ‚àÇŒ∑ =   0.25*(1-Œæ)
    return (‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑)
end

function getùù≠(::Quad4,Œæ::Float64,Œ∑::Float64)
    N‚ÇÅ = 0.25*(1.0-Œæ)*(1.0-Œ∑)
    N‚ÇÇ = 0.25*(1.0+Œæ)*(1.0-Œ∑)
    N‚ÇÉ = 0.25*(1.0+Œæ)*(1.0+Œ∑)
    N‚ÇÑ = 0.25*(1.0-Œæ)*(1.0+Œ∑)
    return N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ
end

function getùë±(a::Quad8,Œæ::Float64,Œ∑::Float64)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    x‚ÇÉ = a.x[a.i[3]]
    y‚ÇÉ = a.y[a.i[3]]
    x‚ÇÑ = a.x[a.i[4]]
    y‚ÇÑ = a.y[a.i[4]]
    x‚ÇÖ = a.x[a.i[5]]
    y‚ÇÖ = a.y[a.i[5]]
    x‚ÇÜ = a.x[a.i[6]]
    y‚ÇÜ = a.y[a.i[6]]
    x‚Çá = a.x[a.i[7]]
    y‚Çá = a.y[a.i[7]]
    x‚Çà = a.x[a.i[8]]
    y‚Çà = a.y[a.i[8]]
    ‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ,‚àÇN‚ÇÖ‚àÇŒæ,‚àÇN‚ÇÜ‚àÇŒæ,‚àÇN‚Çá‚àÇŒæ,‚àÇN‚Çà‚àÇŒæ = get‚àÇùù≠‚àÇŒæ(a,Œæ,Œ∑)
    ‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑,‚àÇN‚ÇÖ‚àÇŒ∑,‚àÇN‚ÇÜ‚àÇŒ∑,‚àÇN‚Çá‚àÇŒ∑,‚àÇN‚Çà‚àÇŒ∑ = get‚àÇùù≠‚àÇŒ∑(a,Œæ,Œ∑)
    J‚ÇÅ‚ÇÅ = ‚àÇN‚ÇÅ‚àÇŒæ*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*x‚ÇÑ + ‚àÇN‚ÇÖ‚àÇŒæ*x‚ÇÖ + ‚àÇN‚ÇÜ‚àÇŒæ*x‚ÇÜ + ‚àÇN‚Çá‚àÇŒæ*x‚Çá + ‚àÇN‚Çà‚àÇŒæ*x‚Çà
    J‚ÇÅ‚ÇÇ = ‚àÇN‚ÇÅ‚àÇŒ∑*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*x‚ÇÑ + ‚àÇN‚ÇÖ‚àÇŒ∑*x‚ÇÖ + ‚àÇN‚ÇÜ‚àÇŒ∑*x‚ÇÜ + ‚àÇN‚Çá‚àÇŒ∑*x‚Çá + ‚àÇN‚Çà‚àÇŒ∑*x‚Çà
    J‚ÇÇ‚ÇÅ = ‚àÇN‚ÇÅ‚àÇŒæ*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*y‚ÇÑ + ‚àÇN‚ÇÖ‚àÇŒæ*y‚ÇÖ + ‚àÇN‚ÇÜ‚àÇŒæ*y‚ÇÜ + ‚àÇN‚Çá‚àÇŒæ*y‚Çá + ‚àÇN‚Çà‚àÇŒæ*y‚Çà
    J‚ÇÇ‚ÇÇ = ‚àÇN‚ÇÅ‚àÇŒ∑*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*y‚ÇÑ + ‚àÇN‚ÇÖ‚àÇŒ∑*y‚ÇÖ + ‚àÇN‚ÇÜ‚àÇŒ∑*y‚ÇÜ + ‚àÇN‚Çá‚àÇŒ∑*y‚Çá + ‚àÇN‚Çà‚àÇŒ∑*y‚Çà
    return J‚ÇÅ‚ÇÅ,J‚ÇÇ‚ÇÅ,J‚ÇÅ‚ÇÇ,J‚ÇÇ‚ÇÇ
end

function getùêΩ(a::Quad8,Œæ::Float64,Œ∑::Float64)
    J‚ÇÅ‚ÇÅ,J‚ÇÇ‚ÇÅ,J‚ÇÅ‚ÇÇ,J‚ÇÇ‚ÇÇ = getùë±(a,Œæ,Œ∑)
    return J‚ÇÅ‚ÇÅ*J‚ÇÇ‚ÇÇ-J‚ÇÇ‚ÇÅ*J‚ÇÅ‚ÇÇ
end

function get‚àÇùù≠‚àÇŒæ(::Quad8,Œæ::Float64,Œ∑::Float64)
    ‚àÇN‚ÇÅ‚àÇŒæ =   0.25*(2*Œæ+Œ∑)*(1-Œ∑)
    ‚àÇN‚ÇÇ‚àÇŒæ =   0.25*(2*Œæ-Œ∑)*(1-Œ∑)
    ‚àÇN‚ÇÉ‚àÇŒæ =   0.25*(2*Œæ+Œ∑)*(1+Œ∑)
    ‚àÇN‚ÇÑ‚àÇŒæ =   0.25*(2*Œæ-Œ∑)*(1+Œ∑)
    ‚àÇN‚ÇÖ‚àÇŒæ = - Œæ*(1-Œ∑)
    ‚àÇN‚ÇÜ‚àÇŒæ =   0.5*(1-Œ∑^2)
    ‚àÇN‚Çá‚àÇŒæ = - Œæ*(1+Œ∑)
    ‚àÇN‚Çà‚àÇŒæ = - 0.5*(1-Œ∑^2)
    return (‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ,‚àÇN‚ÇÖ‚àÇŒæ,‚àÇN‚ÇÜ‚àÇŒæ,‚àÇN‚Çá‚àÇŒæ,‚àÇN‚Çà‚àÇŒæ)
end

function get‚àÇùù≠‚àÇŒ∑(::Quad8,Œæ::Float64,Œ∑::Float64)
    ‚àÇN‚ÇÅ‚àÇŒ∑ =   0.25*(1-Œæ)*(2*Œ∑+Œæ)
    ‚àÇN‚ÇÇ‚àÇŒ∑ =   0.25*(1+Œæ)*(2*Œ∑-Œæ)
    ‚àÇN‚ÇÉ‚àÇŒ∑ =   0.25*(1+Œæ)*(2*Œ∑+Œæ)
    ‚àÇN‚ÇÑ‚àÇŒ∑ =   0.25*(1-Œæ)*(2*Œ∑-Œæ)
    ‚àÇN‚ÇÖ‚àÇŒ∑ = - 0.5*(1-Œæ^2)
    ‚àÇN‚ÇÜ‚àÇŒ∑ = - Œ∑*(1+Œæ)
    ‚àÇN‚Çá‚àÇŒ∑ =   0.5*(1-Œæ^2)
    ‚àÇN‚Çà‚àÇŒ∑ = - Œ∑*(1-Œæ)
    return (‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑,‚àÇN‚ÇÖ‚àÇŒ∑,‚àÇN‚ÇÜ‚àÇŒ∑,‚àÇN‚Çá‚àÇŒ∑,‚àÇN‚Çà‚àÇŒ∑)
end

function getùù≠(::Quad8,Œæ::Float64,Œ∑::Float64)
    N‚ÇÅ = 0.25*(1.0-Œæ)*(1.0-Œ∑)*(-Œæ-Œ∑-1)
    N‚ÇÇ = 0.25*(1.0+Œæ)*(1.0-Œ∑)*(Œæ-Œ∑-1)
    N‚ÇÉ = 0.25*(1.0+Œæ)*(1.0+Œ∑)*(Œæ+Œ∑-1)
    N‚ÇÑ = 0.25*(1.0-Œæ)*(1.0+Œ∑)*(-Œæ+Œ∑-1)
    N‚ÇÖ = 0.5*(1.0-Œæ^2)*(1.0-Œ∑)
    N‚ÇÜ = 0.5*(1.0+Œæ)*(1.0-Œ∑^2)
    N‚Çá = 0.5*(1.0-Œæ^2)*(1.0+Œ∑)
    N‚Çà = 0.5*(1.0-Œæ)*(1.0-Œ∑^2)
    return N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ,N‚ÇÖ,N‚ÇÜ,N‚Çá,N‚Çà
end

function getùíè(a::Seg2)
    ùêø = getùêø(a)
    x‚ÇÅ = a.x[a.i[1]]
    y‚ÇÅ = a.y[a.i[1]]
    x‚ÇÇ = a.x[a.i[2]]
    y‚ÇÇ = a.y[a.i[2]]
    return (y‚ÇÇ-y‚ÇÅ)/ùêø, (x‚ÇÅ-x‚ÇÇ)/ùêø
end

function getùë´(a::Seg2)
    return (-1.0,1.0)
end

Base.issubset(a::AbstractGeometry,b::AbstractGeometry) = a.i ‚äÜ b.i

function Base.intersect(as::Vector{Seg2},bs::Vector{Tri3})
    ùì¢ = Tuple{Seg2,Tri3}[]
    for a in as
        for (i,b) in enumerate(bs)
            if a ‚äÜ b
                index = collect(findfirst(x->x==i,b.i) for i in a.i)
                if index == [1,3]
                    index = [2,1]
                elseif index == [3,1]
                    index = [1,2]
                else
                    index = sortperm(index)
                end
                c = Seg2(Tuple(a.i[index]),a.x,a.y,a.z)
                push!(ùì¢,(c,b))
            end
        end
    end
    return ùì¢
end

function Base.intersect(as::Vector{T‚ÇÅ},bs::Vector{T‚ÇÇ}) where {T‚ÇÅ<:AbstractGeometry,T‚ÇÇ<:AbstractGeometry}
    ùì¢ = Tuple{T‚ÇÅ,T‚ÇÇ}[]
    for a in as
        for (i,b) in enumerate(bs)
            if a ‚äÜ b
                index = sortperm(collect(findfirst(x->x==i,b.i) for i in a.i))
                c = T‚ÇÅ(Tuple(a.i[index]),a.x,a.y,a.z)
                push!(ùì¢,(c,b))
            end
        end
    end
    return ùì¢
end

function getboundaries(as::Vector{Tri3})
    ùìë = Set{Int}[]
    for a in as
        for i in a.i
            b = Set(setdiff(a.i,i))
            if b ‚àâ ùìë
                push!(ùìë,b)
            end
        end
    end
    return ùìë
end
